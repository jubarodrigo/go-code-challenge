// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	users "go-code-challenge/internal/users"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// FindUserByID mocks base method.
func (m *MockUserServiceInterface) FindUserByID(id int) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", id)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUserServiceInterfaceMockRecorder) FindUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUserServiceInterface)(nil).FindUserByID), id)
}

// MockActionServiceInterface is a mock of ActionServiceInterface interface.
type MockActionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockActionServiceInterfaceMockRecorder
}

// MockActionServiceInterfaceMockRecorder is the mock recorder for MockActionServiceInterface.
type MockActionServiceInterfaceMockRecorder struct {
	mock *MockActionServiceInterface
}

// NewMockActionServiceInterface creates a new mock instance.
func NewMockActionServiceInterface(ctrl *gomock.Controller) *MockActionServiceInterface {
	mock := &MockActionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockActionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionServiceInterface) EXPECT() *MockActionServiceInterfaceMockRecorder {
	return m.recorder
}

// FindActionCountByUserID mocks base method.
func (m *MockActionServiceInterface) FindActionCountByUserID(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActionCountByUserID", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActionCountByUserID indicates an expected call of FindActionCountByUserID.
func (mr *MockActionServiceInterfaceMockRecorder) FindActionCountByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActionCountByUserID", reflect.TypeOf((*MockActionServiceInterface)(nil).FindActionCountByUserID), userID)
}

// FindNextActionProbabilities mocks base method.
func (m *MockActionServiceInterface) FindNextActionProbabilities(actionType string) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNextActionProbabilities", actionType)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNextActionProbabilities indicates an expected call of FindNextActionProbabilities.
func (mr *MockActionServiceInterfaceMockRecorder) FindNextActionProbabilities(actionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNextActionProbabilities", reflect.TypeOf((*MockActionServiceInterface)(nil).FindNextActionProbabilities), actionType)
}

// FindReferralIndex mocks base method.
func (m *MockActionServiceInterface) FindReferralIndex() (map[int]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReferralIndex")
	ret0, _ := ret[0].(map[int]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReferralIndex indicates an expected call of FindReferralIndex.
func (mr *MockActionServiceInterfaceMockRecorder) FindReferralIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReferralIndex", reflect.TypeOf((*MockActionServiceInterface)(nil).FindReferralIndex))
}
