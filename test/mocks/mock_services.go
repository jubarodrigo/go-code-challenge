// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	users "go-code-challenge/internal/users"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// FindUserByID mocks base method.
func (m *MockUserService) FindUserByID(id int) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", id)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUserServiceMockRecorder) FindUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUserService)(nil).FindUserByID), id)
}

// MockActionService is a mock of ActionService interface.
type MockActionService struct {
	ctrl     *gomock.Controller
	recorder *MockActionServiceMockRecorder
}

// MockActionServiceMockRecorder is the mock recorder for MockActionService.
type MockActionServiceMockRecorder struct {
	mock *MockActionService
}

// NewMockActionService creates a new mock instance.
func NewMockActionService(ctrl *gomock.Controller) *MockActionService {
	mock := &MockActionService{ctrl: ctrl}
	mock.recorder = &MockActionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionService) EXPECT() *MockActionServiceMockRecorder {
	return m.recorder
}

// FindActionCountByUserID mocks base method.
func (m *MockActionService) FindActionCountByUserID(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActionCountByUserID", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActionCountByUserID indicates an expected call of FindActionCountByUserID.
func (mr *MockActionServiceMockRecorder) FindActionCountByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActionCountByUserID", reflect.TypeOf((*MockActionService)(nil).FindActionCountByUserID), userID)
}

// FindNextActionProbabilities mocks base method.
func (m *MockActionService) FindNextActionProbabilities(actionType string) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNextActionProbabilities", actionType)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNextActionProbabilities indicates an expected call of FindNextActionProbabilities.
func (mr *MockActionServiceMockRecorder) FindNextActionProbabilities(actionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNextActionProbabilities", reflect.TypeOf((*MockActionService)(nil).FindNextActionProbabilities), actionType)
}

// FindReferralIndex mocks base method.
func (m *MockActionService) FindReferralIndex() (map[int]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReferralIndex")
	ret0, _ := ret[0].(map[int]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReferralIndex indicates an expected call of FindReferralIndex.
func (mr *MockActionServiceMockRecorder) FindReferralIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReferralIndex", reflect.TypeOf((*MockActionService)(nil).FindReferralIndex))
}
